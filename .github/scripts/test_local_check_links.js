import { spawn } from 'child_process';
import fs from 'fs';
import path from 'path';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç dev —Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Å—ã–ª–∫–∏ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
 */

const PORT = 4343;
const DOMAIN = `localhost:${PORT}`;
const MAX_WAIT_TIME = 30000; // 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º –æ–∂–∏–¥–∞–Ω–∏—è

/**
 * –ñ–¥–µ—Ç –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º
 * @param {string} url - URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {number} maxWaitTime - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º—Å
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
 */
async function waitForServer(url, maxWaitTime = MAX_WAIT_TIME) {
  const startTime = Date.now();
  
  while (Date.now() - startTime < maxWaitTime) {
    try {
      const response = await fetch(`http://${url}`);
      if (response.ok) {
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://${url}`);
        return true;
      }
    } catch (error) {
      // –°–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
    }
    
    // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ ${maxWaitTime / 1000} —Å–µ–∫—É–Ω–¥`);
  return false;
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {Array} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
 * @param {Object} options - –û–ø—Ü–∏–∏ –¥–ª—è spawn
 * @returns {Promise<{code: number, stdout: string, stderr: string}>}
 */
function runCommand(command, args = [], options = {}) {
  return new Promise((resolve, reject) => {
    const process = spawn(command, args, {
      stdio: 'pipe',
      shell: true,
      ...options
    });

    let stdout = '';
    let stderr = '';

    process.stdout?.on('data', (data) => {
      stdout += data.toString();
    });

    process.stderr?.on('data', (data) => {
      stderr += data.toString();
    });

    process.on('close', (code) => {
      resolve({ code, stdout, stderr });
    });

    process.on('error', (error) => {
      reject(error);
    });
  });
}

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã astro dev
 */
async function stopAstroDev() {
  try {
    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é dev —Å–µ—Ä–≤–µ—Ä...');
    await runCommand('pkill', ['-f', 'astro dev']);
    console.log('‚úÖ Dev —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å dev —Å–µ—Ä–≤–µ—Ä:', error.message);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function testLocal() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
  
  let astroProcess = null;
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º dev —Å–µ—Ä–≤–µ—Ä
    console.log(`üåê –ó–∞–ø—É—Å–∫–∞—é dev —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}...`);
    astroProcess = spawn('astro', ['dev', '--port', PORT.toString(), '--config', 'astro.local.config.mjs'], {
      stdio: 'pipe',
      detached: true
    });

    // –ñ–¥–µ–º –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º
    const serverReady = await waitForServer(DOMAIN);
    if (!serverReady) {
      throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è');
    }

    // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    console.log('‚è≥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
    await new Promise(resolve => setTimeout(resolve, 5000));

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Å—ã–ª–æ–∫
    console.log('üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Å—ã–ª–æ–∫...');
    const linkCheckResult = await runCommand('node', ['.github/scripts/checkLinks.js'], {
      env: { ...process.env, DOMAIN }
    });

    if (linkCheckResult.code === 0) {
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log(linkCheckResult.stdout);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–æ–∫:');
      console.log(linkCheckResult.stderr);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const brokenLinksFile = './broken_links.txt';
    if (fs.existsSync(brokenLinksFile)) {
      const content = fs.readFileSync(brokenLinksFile, 'utf8');
      console.log('\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫:');
      console.log(content);
    } else {
      console.log('\n‚úÖ –ë–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  } finally {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dev —Å–µ—Ä–≤–µ—Ä
    await stopAstroDev();
    
    if (astroProcess) {
      try {
        process.kill(-astroProcess.pid);
      } catch (error) {
        // –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω
      }
    }
  }
  
  console.log('‚ú® –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testLocal().catch(console.error);
