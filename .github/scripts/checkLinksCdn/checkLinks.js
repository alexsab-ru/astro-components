import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { LinkChecker } from 'linkinator';
import { getDomains } from './getDomains.js';
import { transformVkUrl } from './transformVkUrl.js';
import { sendNotificationToTelegram } from './sendTelegram.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const RETRY_CONFIG = {
  maxRetries: 3,
  retryDelay: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã
  timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
};

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const outputPath = path.join(__dirname, 'broken_links.txt');

const domains = await getDomains();

if (!domains?.length) {
  console.log('–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –ø—É—Å—Ç.');
  process.exit(0);
}

if (fs.existsSync(outputPath)) fs.unlinkSync(outputPath);

for (const domain of domains) {
  await checkLinks(`https://${domain}`);
}

console.log('‚ú® –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram, –µ—Å–ª–∏ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏
await sendNotificationToTelegram();

process.exit(0);

async function retryBrokenLinks(brokenLinks) {
  console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ${brokenLinks.length} –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫...`);
  
  const checker = new LinkChecker();
  const retryResults = [];
  
  for (const link of brokenLinks) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º VK embed-—Å—Å—ã–ª–∫–∏ –≤ –ø—Ä—è–º—ã–µ
    const transformedUrl = transformVkUrl(link.url);
    const isVkEmbed = transformedUrl !== link.url;
    
    if (isVkEmbed) {
      console.log(`üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É—é VK embed-—Å—Å—ã–ª–∫—É: ${link.url} ‚Üí ${transformedUrl}`);
    }
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–≤—Ç–æ—Ä–Ω–æ: ${transformedUrl}`);
    
    try {
      const result = await checker.check({
        path: transformedUrl,
        recurse: false,
        timeout: RETRY_CONFIG.timeout,
        retries: RETRY_CONFIG.maxRetries,
        retryDelay: RETRY_CONFIG.retryDelay,
      });
      
      const linkResult = result.links[0];
      if (linkResult && linkResult.state === 'BROKEN') {
        retryResults.push({
          url: link.url, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –æ—Ç—á–µ—Ç–µ
          parent: link.parent,
          status: linkResult.status,
          retryAttempts: RETRY_CONFIG.maxRetries + 1,
          transformedUrl: isVkEmbed ? transformedUrl : undefined
        });
        console.log(`‚ùå –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–∏—Ç–∞—è: ${transformedUrl} (—Å—Ç–∞—Ç—É—Å: ${linkResult.status})`);
      } else {
        console.log(`‚úÖ –°—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: ${transformedUrl}`);
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ ${transformedUrl}: ${error.message}`);
      retryResults.push({
        url: link.url,
        parent: link.parent,
        status: 'TIMEOUT_ERROR',
        retryAttempts: RETRY_CONFIG.maxRetries + 1,
        error: error.message,
        transformedUrl: isVkEmbed ? transformedUrl : undefined
      });
    }
  }
  
  return retryResults;
}

async function checkLinks(domain) {
  console.log(`üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Å—ã–ª–æ–∫ –Ω–∞ ${domain}...`);
  const checker = new LinkChecker();

  const result = await checker.check({
    path: domain,
    recurse: true,
    linksToSkip: [
      /javascript:void\(0\)/,
      /checkLinks\.md/
    ],
    timeout: RETRY_CONFIG.timeout,
    retries: 1, // –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
  });

  const brokenLinks = result.links.filter(x => x.state === 'BROKEN').map((item) => {
    return {
      url: item.url,
      parent: item.parent,
      status: item.status,
    }
  });

  console.log(`üìä –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ ${brokenLinks.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫.`);

  // –ï—Å–ª–∏ –µ—Å—Ç—å –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  let finalBrokenLinks = brokenLinks;
  if (brokenLinks.length > 0) {
    finalBrokenLinks = await retryBrokenLinks(brokenLinks);
  }

  if (finalBrokenLinks.length) {
    const header = `\n==== ${domain} ====\n`;
    let message = `<b>–ù–∞ —Å–∞–π—Ç–µ ${domain} –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏. –í—Å–µ–≥–æ: ${finalBrokenLinks.length}</b>\n\n`;
    message += finalBrokenLinks.map(item => {
      let linkInfo = `<b>–°—Å—ã–ª–∫–∞</b>: ${item.url}\n<b>–†–æ–¥–∏—Ç–µ–ª—å</b>: ${item.parent}\n<b>–°—Ç–∞—Ç—É—Å</b>: ${item.status}`;
      if (item.transformedUrl) {
        linkInfo += `\n<b>–ü—Ä–æ–≤–µ—Ä—è–ª–∞—Å—å –∫–∞–∫</b>: ${item.transformedUrl}`;
      }
      if (item.retryAttempts) {
        linkInfo += `\n<b>–ü–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>: ${item.retryAttempts}`;
      }
      if (item.error) {
        linkInfo += `\n<b>–û—à–∏–±–∫–∞</b>: ${item.error}`;
      }
      return linkInfo;
    }).join('\n\n');
    
    fs.appendFileSync(outputPath, header + message + '\n', 'utf8');
    console.log(`‚ùå –ü–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–π–¥–µ–Ω–æ ${finalBrokenLinks.length} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${outputPath}`);
  } else {
    console.log('‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  }
};