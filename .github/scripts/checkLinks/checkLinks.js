import fs from 'fs';
import { LinkChecker } from 'linkinator';
import dotenv from 'dotenv';

dotenv.config();

/**
 * Gets domain from environment variable or .env file
 * @returns {string} The domain to check
 */
function getDomain() {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (process.env.DOMAIN) {
    return process.env.DOMAIN;
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á–∏—Ç–∞–µ–º –∏–∑ .env —Ñ–∞–π–ª–∞
  try {
    const envContent = fs.readFileSync('.env', 'utf8');
    const domainMatch = envContent.match(/^DOMAIN=(.+)$/m);
    if (domainMatch) {
      const domainValue = domainMatch[1].trim();
      // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      return domainValue.replace(/^["']|["']$/g, '');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω');
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  console.log('‚ö†Ô∏è –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env —Ñ–∞–π–ª–µ. –ò—Å–ø–æ–ª—å–∑—É—é localhost:4343');
  return 'localhost:4343';
}

/**
 * Determines the correct protocol for a domain
 * @param {string} domain - The domain to check
 * @returns {string} The domain with the correct protocol
 */
function getDomainWithProtocol(domain) {
  // If domain already has protocol, return as is
  if (domain.startsWith('http://') || domain.startsWith('https://')) {
    return domain;
  }
  
  // Add protocol based on domain
  const protocol = domain.includes('localhost') ? 'http' : 'https';
  return `${protocol}://${domain}`;
}

const domain = getDomainWithProtocol(getDomain());
const outputPath = './broken_links.txt';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const RETRY_CONFIG = {
  maxRetries: 3,
  retryDelay: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã
  timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫
 * @param {Array} brokenLinks - –ú–∞—Å—Å–∏–≤ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
async function retryBrokenLinks(brokenLinks) {
  console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ${brokenLinks.length} –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫...`);
  
  const checker = new LinkChecker();
  const retryResults = [];
  
  for (const link of brokenLinks) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–≤—Ç–æ—Ä–Ω–æ: ${link.url}`);
    
    try {
      const result = await checker.check({
        path: link.url,
        recurse: false,
        timeout: RETRY_CONFIG.timeout,
        retries: RETRY_CONFIG.maxRetries,
        retryDelay: RETRY_CONFIG.retryDelay,
      });
      
      const linkResult = result.links[0];
      if (linkResult && linkResult.state === 'BROKEN') {
        retryResults.push({
          url: link.url,
          parent: link.parent,
          status: linkResult.status,
          retryAttempts: RETRY_CONFIG.maxRetries + 1
        });
        console.log(`‚ùå –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–∏—Ç–∞—è: ${link.url} (—Å—Ç–∞—Ç—É—Å: ${linkResult.status})`);
      } else {
        console.log(`‚úÖ –°—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: ${link.url}`);
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ ${link.url}: ${error.message}`);
      retryResults.push({
        url: link.url,
        parent: link.parent,
        status: 'TIMEOUT_ERROR',
        retryAttempts: RETRY_CONFIG.maxRetries + 1,
        error: error.message
      });
    }
  }
  
  return retryResults;
}

async function checkLinks() {
  console.log(`üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Å—ã–ª–æ–∫ –Ω–∞ ${domain}...`);
  const checker = new LinkChecker();

  const result = await checker.check({
    path: domain,
    recurse: true,
    linksToSkip: [/javascript:void\(0\)/],
    timeout: RETRY_CONFIG.timeout,
    retries: 1, // –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
  });

  const brokenLinks = result.links.filter(x => x.state === 'BROKEN').map((item) => {
    return {
      url: item.url,
      parent: item.parent,
      status: item.status,
    }
  });

  console.log(`üìä –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ ${brokenLinks.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫.`);

  // –ï—Å–ª–∏ –µ—Å—Ç—å –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  let finalBrokenLinks = brokenLinks;
  if (brokenLinks.length > 0) {
    finalBrokenLinks = await retryBrokenLinks(brokenLinks);
  }

  if (finalBrokenLinks.length) {
    let message = `<b>–ù–∞ —Å–∞–π—Ç–µ ${domain} –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏. –í—Å–µ–≥–æ: ${finalBrokenLinks.length}</b>\n\n`;
    message += finalBrokenLinks.map(item => {
      let linkInfo = `<b>–°—Å—ã–ª–∫–∞</b>: ${item.url}\n<b>–†–æ–¥–∏—Ç–µ–ª—å</b>: ${item.parent}\n<b>–°—Ç–∞—Ç—É—Å</b>: ${item.status}`;
      if (item.retryAttempts) {
        linkInfo += `\n<b>–ü–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>: ${item.retryAttempts}`;
      }
      if (item.error) {
        linkInfo += `\n<b>–û—à–∏–±–∫–∞</b>: ${item.error}`;
      }
      return linkInfo;
    }).join('\n\n');
    
    fs.writeFileSync(outputPath, message, 'utf8');
    console.log(`‚ùå –ü–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–π–¥–µ–Ω–æ ${finalBrokenLinks.length} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${outputPath}`);
  } else {
    console.log('‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –±–∏—Ç—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (fs.existsSync(outputPath)) {
      fs.unlinkSync(outputPath);
    }
  }
  
  console.log('‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}

checkLinks();