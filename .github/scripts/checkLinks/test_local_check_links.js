import { spawn } from 'child_process';
import fs from 'fs';
import path from 'path';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç dev —Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Å—ã–ª–∫–∏ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
 */

const PORT = 4343;
const DOMAIN = `localhost:${PORT}`;
const MAX_WAIT_TIME = 30000; // 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º –æ–∂–∏–¥–∞–Ω–∏—è

/**
 * –ñ–¥–µ—Ç –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º
 * @param {string} url - URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {number} maxWaitTime - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º—Å
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
 */
async function waitForServer(url, maxWaitTime = MAX_WAIT_TIME) {
  const startTime = Date.now();
  
  while (Date.now() - startTime < maxWaitTime) {
    try {
      const response = await fetch(`http://${url}`);
      if (response.ok) {
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://${url}`);
        return true;
      }
    } catch (error) {
      // –°–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
    }
    
    // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ ${maxWaitTime / 1000} —Å–µ–∫—É–Ω–¥`);
  return false;
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {Array} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
 * @param {Object} options - –û–ø—Ü–∏–∏ –¥–ª—è spawn
 * @returns {Promise<{code: number, stdout: string, stderr: string}>}
 */
function runCommand(command, args = [], options = {}) {
  return new Promise((resolve, reject) => {
    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ childProcess, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç–µ–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π process
    const childProcess = spawn(command, args, {
      stdio: 'pipe',
      shell: true,
      ...options
    });

    let stdout = '';
    let stderr = '';

    childProcess.stdout?.on('data', (data) => {
      stdout += data.toString();
    });

    childProcess.stderr?.on('data', (data) => {
      stderr += data.toString();
    });

    childProcess.on('close', (code) => {
      resolve({ code, stdout, stderr });
    });

    childProcess.on('error', (error) => {
      reject(error);
    });
  });
}

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç dev-—Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏
 * –ë–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è pkill, —á—Ç–æ–±—ã –Ω–µ –∑–∞–¥–µ—Ç—å —á—É–∂–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, VS Code)
 */
async function stopAstroDev(astroProcess) {
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
  const wait = (ms) => new Promise((r) => setTimeout(r, ms));

  if (!astroProcess?.pid) {
    return;
  }

  try {
    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é dev —Å–µ—Ä–≤–µ—Ä...');
    // –ú—ã –∑–∞–ø—É—Å–∫–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å detached:true ‚Üí –æ–Ω –ª–∏–¥–µ—Ä —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.
    // –®–ª—ë–º SIGTERM –≤—Å–µ–π –≥—Ä—É–ø–ø–µ (–º–∏–Ω—É—Å –ø–µ—Ä–µ–¥ pid = –≥—Ä—É–ø–ø–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ *nix).
    try {
      process.kill(-astroProcess.pid, 'SIGTERM');
    } catch (e) {
      // –ú–æ–≥ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
    }

    // –î–∞–µ–º –¥–æ 2 —Å–µ–∫ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    await wait(2000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∞—Å—å –ª–∏ –≥—Ä—É–ø–ø–∞ –∂–∏–≤–∞ (signal 0 = —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞)
    let alive = true;
    try {
      process.kill(-astroProcess.pid, 0);
    } catch (_) {
      alive = false;
    }

    if (alive) {
      // –≠—Å–∫–∞–ª–∏—Ä—É–µ–º –¥–æ SIGKILL, –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
      try {
        process.kill(-astroProcess.pid, 'SIGKILL');
      } catch (_) {}
    }

    console.log('‚úÖ Dev —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å dev —Å–µ—Ä–≤–µ—Ä:', error.message);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function testLocal() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
  
  let astroProcess = null;
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º dev —Å–µ—Ä–≤–µ—Ä
    console.log(`üåê –ó–∞–ø—É—Å–∫–∞—é dev —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}...`);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º npx –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ astro
    astroProcess = spawn('npx', ['astro', 'dev', '--port', PORT.toString(), '--config', 'astro.local.config.mjs'], {
      stdio: 'pipe',
      shell: true, // –æ—Å—Ç–∞–≤–ª—è–µ–º true –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ npx –≤ PATH
      detached: true // —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–∞—Ç—å –≤—Å—é –≥—Ä—É–ø–ø—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∑–∞–ø—É—Å–∫–∞ dev-—Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ astro –Ω–µ –Ω–∞–π–¥–µ–Ω)
    astroProcess.on('error', (err) => {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å astro dev: ${err.message}`);
    });

    // –ñ–¥–µ–º –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º
    const serverReady = await waitForServer(DOMAIN);
    if (!serverReady) {
      throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è');
    }

    // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    console.log('‚è≥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
    await new Promise(resolve => setTimeout(resolve, 5000));

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Å—ã–ª–æ–∫
    console.log('üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Å—ã–ª–æ–∫...');
    const linkCheckResult = await runCommand('node', ['.github/scripts/checkLinks/checkLinks.js'], {
      env: { ...process.env, DOMAIN }
    });

    if (linkCheckResult.code === 0) {
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log(linkCheckResult.stdout);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–æ–∫:');
      console.log(linkCheckResult.stderr);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const brokenLinksFile = './broken_links.txt';
    if (fs.existsSync(brokenLinksFile)) {
      const content = fs.readFileSync(brokenLinksFile, 'utf8');
      console.log('\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫:');
      console.log(content);
    } else {
      console.log('\n‚úÖ –ë–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  } finally {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—Ç dev-—Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∑–∞–ø—É—Å–∫–∞–ª–∏ –≤—ã—à–µ
    await stopAstroDev(astroProcess);
  }
  
  console.log('‚ú® –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testLocal().catch(console.error);
