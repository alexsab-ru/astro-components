import fs from 'fs';
import { LinkChecker } from 'linkinator';
import dotenv from 'dotenv';

dotenv.config();

const domain = process.env.DOMAIN;
const outputPath = './broken_links.txt';

async function checkLinks() {
  console.log('üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Å—ã–ª–æ–∫...');
  const checker = new LinkChecker();

  const result = await checker.check({
    path: `https://${domain}`,
    recurse: true,
    // linksToSkip: []
  });

  const brokenLinks = result.links.filter(x => x.state === 'BROKEN').map((item) => {
    return {
      url: item.url,
      parent: item.parent,
      status: item.status,
    }
  });

  if (brokenLinks.length) {
    let message = `<b>–ù–∞ —Å–∞–π—Ç–µ ${domain} –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏. –í—Å–µ–≥–æ: ${brokenLinks.length}</b>\n\n`;
    message += brokenLinks.map(item => `<b>–°—Å—ã–ª–∫–∞</b>: ${item.url}\n<b>–†–æ–¥–∏—Ç–µ–ª—å</b>: ${item.parent}`).join('\n\n');
    fs.writeFileSync(outputPath, message, 'utf8');
    console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${brokenLinks.length} –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${outputPath}`);
  } else {
    console.log('‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  }
  
  console.log('‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}

checkLinks();