#!/usr/bin/env python
import os
import re
import copy
import string
import yaml
import json
import shutil
import requests
import xml.etree.ElementTree as ET
from PIL import Image, ImageOps
from io import BytesIO
import urllib.parse
from pathlib import Path
from typing import Dict, Any
from config import *
from bs4 import BeautifulSoup


def process_friendly_url(friendly_url, replace = "-"):
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    processed_id = re.sub(r'[\/\\?%*:|"<>.,;\'\[\]()&]', '', friendly_url)

    # –ó–∞–º–µ–Ω–∞ '+' –Ω–∞ '-plus'
    processed_id = processed_id.replace("+", "-plus")

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    processed_id = processed_id.replace(" ", replace).lower()

    return processed_id


def process_vin_hidden(vin):
    return f"{vin[:5]}-{vin[-4:]}"


# Helper function to process permalink
def process_permalink(vin):
    return f"/cars/{vin[:5]}-{vin[-4:]}/"


def format_html_for_mdx(raw_html):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç HTML –¥–ª—è MDX, —É—á–∏—Ç—ã–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ MDX-–ø–∞—Ä—Å–µ—Ä–∞:
    - –£–¥–∞–ª—è–µ—Ç —Ç–µ–≥–∏ <p>, —Ç–∞–∫ –∫–∞–∫ MDX —Å–∞–º –∏—Ö –¥–æ–±–∞–≤–ª—è–µ—Ç
    - –ó–∞–º–µ–Ω—è–µ—Ç <br/> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—â–∏–µ —Ç–µ–≥–∏
    - –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤
    - –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Ç–µ–≥–∞–º–∏
    - –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
    - –î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã –º–µ–∂–¥—É —Å–ø–∏—Å–∫–∞–º–∏ –∏ –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å HTML —Å –ø–æ–º–æ—â—å—é BeautifulSoup
    soup = BeautifulSoup(raw_html, "html.parser")
    
    # –ü–æ–ª—É—á–∞–µ–º HTML –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç &nbsp;)
    html_output = str(soup)

    # print(html_output)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MDX
    html_output = html_output.replace('\\', '\\\\')  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏
    html_output = html_output.replace('{', '\\{')    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏
    html_output = html_output.replace('}', '\\}')
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ <p> –∏ </p>, —Ç–∞–∫ –∫–∞–∫ MDX —Å–∞–º –∏—Ö –¥–æ–±–∞–≤–∏—Ç
    html_output = re.sub(r'</?p>', '', html_output)
    
    # –ó–∞–º–µ–Ω—è–µ–º <br/> –∏ <br> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    html_output = re.sub(r'(<br/?>)', r'\1\n', html_output)
    
    # –î–æ–±–∞–≤–ª—è–µ–º <br/> –º–µ–∂–¥—É –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º —Å–ø–∏—Å–∫–æ–º –∏ —Ç–µ–≥–æ–º –∂–∏—Ä–Ω–æ—Å—Ç–∏
    html_output = re.sub(r'(</ul>)(<strong>)', r'\1<br/>\2', html_output)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Ç–µ–≥–∞, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–µ–≥–æ –∏–¥–µ—Ç –±—É–∫–≤–∞
    html_output = re.sub(r'(</[^>]+>)([–∞-—è–ê-–Øa-zA-Z])', r'\1 \2', html_output)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–º —Ç–µ–≥–æ–º, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥ –Ω–∏–º –±—É–∫–≤–∞
    html_output = re.sub(r'([–∞-—è–ê-–Øa-zA-Z])(<[^/][^>]*>)', r'\1 \2', html_output)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ–≥–∞–º–∏
    html_output = re.sub(r'(>)(<)', r'\1 \2', html_output)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    # 1. –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º —Ç–µ–≥–∞–º </ul>, </li>
    html_output = re.sub(r'(</ul>|</li>)', r'\1\n', html_output)
    
    # 2. –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–º —Ç–µ–≥–∞–º <ul>, <li>
    html_output = re.sub(r'(<ul>|<li>)', r'\n\1', html_output)
    
    # 3. –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    # html_output = re.sub(r'\n\s*\n', '\n', html_output)
    
    # 4. –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    html_output = '\n'.join(line.strip() for line in html_output.split('\n'))
    
    return html_output

# Helper function to process description and add it to the body
def process_description(desc_text):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è—è HTML-—Ä–∞–∑–º–µ—Ç–∫—É.
    –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ p-—Ç–µ–≥–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å HTML.
    
    Args:
        desc_text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
        
    Returns:
        str: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π HTML-—Ç–µ–∫—Å—Ç
    """
    if not desc_text:
        return ""
    
    pretty_html = format_html_for_mdx(desc_text)
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = pretty_html.split('\n')
    wrapped_lines = []
    for line in lines:
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º <p>&nbsp;</p>
        if not line.strip():
            wrapped_lines.append('<p>&nbsp;</p>')
            continue
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å <ul>, <li>, </ul>, </li>, –Ω–µ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ <p>
        if line.lstrip().startswith('<ul>') or line.lstrip().startswith('<li>') or \
           line.lstrip().startswith('</ul>') or line.lstrip().startswith('</li>'):
            wrapped_lines.append(line)
        else:
            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ <p>...</p>
            wrapped_lines.append(f'<p> {line} </p>')
    # –°–∫–ª–µ–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    result_html = '\n'.join(wrapped_lines)
    return result_html


def createThumbs(image_urls, friendly_url, current_thumbs, thumbs_dir, temp_thumbs_dir, skip_thumbs=False, count_thumbs=5):
    # Ensure count_thumbs is an integer
    # Convert string or other types to integer, with fallback to default value
    try:
        count_thumbs = int(count_thumbs)
    except (ValueError, TypeError):
        count_thumbs = 5  # Default fallback value
        print(f"‚ö†Ô∏è Warning: count_thumbs could not be converted to integer, using default value 5")

    # print(f"üîç –û—Ç–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é:")
    # print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_urls)}")
    # print(f"   –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–µ–≤—å—é: {skip_thumbs}")
    # print(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–µ–≤—å—é: {thumbs_dir}")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    relative_thumbs_dir = thumbs_dir.replace("public", "")

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ –Ω–æ–≤—ã–º –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–∞–º
    new_or_existing_files = []

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤—ã—Ö count_thumbs –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for index, img_url in enumerate(image_urls[:count_thumbs]):
        try:
            # print(f"   üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {index + 1}: {img_url}")
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ URL –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            original_filename = os.path.basename(urllib.parse.urlparse(img_url).path)
            filename_without_extension, _ = os.path.splitext(original_filename)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–∏–º–≤–æ–ª–æ–≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
            last_5_chars = filename_without_extension[-5:]
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–∏–º–≤–æ–ª–æ–≤
            output_filename = f"thumb_{friendly_url}_{last_5_chars}_{index}.webp"
            output_path = os.path.join(thumbs_dir, output_filename)
            temp_output_path = os.path.join(temp_thumbs_dir, output_filename)
            relative_output_path = os.path.join(relative_thumbs_dir, output_filename)

            # print(f"   üìÅ –ü—É—Ç—å –∫ –ø—Ä–µ–≤—å—é: {output_path}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if not os.path.exists(output_path) and not skip_thumbs:
                # print(f"   ‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
                response = requests.get(img_url)
                image = Image.open(BytesIO(response.content))
                aspect_ratio = image.width / image.height
                new_width = 360
                new_height = int(new_width / aspect_ratio)
                resized_image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
                resized_image.save(output_path, "WEBP")
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–≤—å—é: {relative_output_path}")
            else:
                print(f"   ‚ö†Ô∏è –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {relative_output_path} –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω —Ñ–ª–∞–≥–æ–º skip_thumbs: {skip_thumbs}")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–∫–∏
            new_or_existing_files.append(relative_output_path)
            current_thumbs.append(output_path)  # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_url}: {e}"
            print_message(error_message, "error")

    return new_or_existing_files


def cleanup_unused_thumbs(current_thumbs, thumbs_dir):
    all_thumbs = [os.path.join(thumbs_dir, f) for f in os.listdir(thumbs_dir)]
    unused_thumbs = [thumb for thumb in all_thumbs if thumb not in current_thumbs]

    for thumb in unused_thumbs:
        os.remove(thumb)
        print(f"–£–¥–∞–ª–µ–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ø—Ä–µ–≤—å—é: {thumb}")

# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ air
def create_child_element(parent, new_element_name, text):
    # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    old_element = parent.find(new_element_name)
    if old_element is not None:
        parent.remove(old_element)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –Ω—É–∂–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º —Å—Ç–∞—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    new_element = ET.Element(new_element_name)
    new_element.text = str(text)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è
    parent.append(new_element)

# –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
def rename_child_element(parent, old_element_name, new_element_name):
    old_element = parent.find(old_element_name)
    if old_element is not None:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –Ω—É–∂–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º —Å—Ç–∞—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        new_element = ET.Element(new_element_name)
        new_element.text = old_element.text

        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–æ–≤—ã–º
        parent.insert(list(parent).index(old_element), new_element)
        parent.remove(old_element)

# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ air
def update_element_text(parent, element_name, new_text):
    element = parent.find(element_name)
    if element is not None:
        element.text = new_text
    else:
        # –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        print(f"–≠–ª–µ–º–µ–Ω—Ç '{element_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
def localize_element_text(element):
    translations = {
        # engineType
        "hybrid": "–ì–∏–±—Ä–∏–¥",
        "petrol": "–ë–µ–Ω–∑–∏–Ω",
        "diesel": "–î–∏–∑–µ–ª—å",
        "petrol_and_gas": "–ë–µ–Ω–∑–∏–Ω –∏ –≥–∞–∑",
        "electric": "–≠–ª–µ–∫—Ç—Ä–æ",

        # driveType
        "full_4wd": "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π",
        "optional_4wd": "–ü–æ–¥–∫–ª—é—á–∞–µ–º—ã–π –ø–æ–ª–Ω—ã–π",
        "front": "–ü–µ—Ä–µ–¥–Ω–∏–π",
        "rear": "–ó–∞–¥–Ω–∏–π",

        # gearboxType
        "robotized": "–†–æ–±–æ—Ç",
        "variator": "–í–∞—Ä–∏–∞—Ç–æ—Ä",
        "manual": "–ú–µ—Ö–∞–Ω–∏–∫–∞",
        "automatic": "–ê–≤—Ç–æ–º–∞—Ç",

        # transmission
        "RT": "–†–æ–±–æ—Ç",
        "CVT": "–í–∞—Ä–∏–∞—Ç–æ—Ä",
        "MT": "–ú–µ—Ö–∞–Ω–∏–∫–∞",
        "AT": "–ê–≤—Ç–æ–º–∞—Ç",

        # ptsType
        "duplicate": "–î—É–±–ª–∏–∫–∞—Ç",
        "original": "–û—Ä–∏–≥–∏–Ω–∞–ª",
        "electronic": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π",

        # bodyColor
        "black": "–ß–µ—Ä–Ω—ã–π",
        "white": "–ë–µ–ª—ã–π",
        "blue": "–°–∏–Ω–∏–π",
        "gray": "–°–µ—Ä—ã–π",
        "silver": "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π",
        "brown": "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π",
        "red": "–ö—Ä–∞—Å–Ω—ã–π",
        "grey": "–°–µ—Ä—ã–π",
        "azure": "–õ–∞–∑—É—Ä–Ω—ã–π",
        "beige": "–ë–µ–∂–µ–≤—ã–π",
        "Dark grey": "–¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π",

        # steeringWheel
        "left": "–õ–µ–≤—ã–π",
        "right": "–ü—Ä–∞–≤—ã–π",
        "L": "–õ–µ–≤—ã–π",
        "R": "–ü—Ä–∞–≤—ã–π",

        # bodyType
        "suv": "SUV",

    }

    if element is not None and element.text in translations:
        element.text = translations[element.text]


def join_car_data(car, *elements):
    """
    Builds a string by extracting specified elements from the XML car data.

    Args:
        car (Element): The XML element representing a car.
        *elements (str): Variable number of element names to extract.

    Returns:
        str: The string containing extracted elements (joined by spaces).
    """
    car_parts = []

    for element_name in elements:
        element = car.find(element_name)
        if element is not None and element.text is not None:
            car_parts.append(element.text.strip())

    return " ".join(car_parts)


def convert_to_string(element):
    if element.text is not None:
        element.text = str(element.text)
    for child in element:
        convert_to_string(child)


def avitoColor(color):
    mapping = {
        '–±–µ–∂–µ–≤—ã–π': '–±–µ–∂–µ–≤—ã–π',
        '–±–æ—Ä–¥–æ–≤—ã–π': '–±–æ—Ä–¥–æ–≤—ã–π',
        '–±–µ–ª—ã–π': '–±–µ–ª—ã–π',
        '089/20 –±–µ–ª—ã–π –ø–µ—Ä–ª–∞–º—É—Ç—Ä': '–±–µ–ª—ã–π',
        '070/20 –±–µ–ª—ã–π –ø–µ—Ä–ª–∞–º—É—Ç—Ä': '–±–µ–ª—ã–π',
        '–≥–æ–ª—É–±–æ–π': '–≥–æ–ª—É–±–æ–π',
        '—Å–µ—Ä–æ-–≥–æ–ª—É–±–æ–π': '–≥–æ–ª—É–±–æ–π',
        '–∂–µ–ª—Ç—ã–π': '–∂–µ–ª—Ç—ã–π',
        '–∑–µ–ª–µ–Ω—ã–π': '–∑–µ–ª–µ–Ω—ã–π',
        '–∑–µ–ª—ë–Ω—ã–π': '–∑–µ–ª–µ–Ω—ã–π',
        '–∑–æ–ª–æ—Ç–æ–π': '–∑–æ–ª–æ—Ç–æ–π',
        '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π',
        '–∫—Ä–∞—Å–Ω—ã–π': '–∫—Ä–∞—Å–Ω—ã–π',
        '–æ—Ä–∞–Ω–∂–µ–≤—ã–π': '–æ—Ä–∞–Ω–∂–µ–≤—ã–π',
        '–ø—É—Ä–ø—É—Ä–Ω—ã–π': '–ø—É—Ä–ø—É—Ä–Ω—ã–π',
        '—Ä–æ–∑–æ–≤—ã–π': '—Ä–æ–∑–æ–≤—ã–π',
        '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π': '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π',
        '—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π': '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π',
        '—Å–µ—Ä—ã–π': '—Å–µ—Ä—ã–π',
        '—Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π': '—Å–µ—Ä—ã–π',
        '–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏—Ç': '—Å–µ—Ä—ã–π',
        '1l1/21 —Å–µ—Ä—ã–π —Ö—Ä–æ–º –º–µ—Ç–∞–ª–ª': '—Å–µ—Ä—ã–π',
        '1l1/20': '—Å–µ—Ä—ã–π',
        '—Å–∏–Ω–∏–π': '—Å–∏–Ω–∏–π',
        '—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π': '—Å–∏–Ω–∏–π',
        '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π',
        '—á–µ—Ä–Ω—ã–π': '—á–µ—Ä–Ω—ã–π',
        '—á—ë—Ä–Ω—ã–π': '—á–µ—Ä–Ω—ã–π',
        '—á–µ—Ä–Ω—ã–π/—á–µ—Ä–Ω—ã–π': '—á–µ—Ä–Ω—ã–π',
    }

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫–ª—é—á –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    normalized_color = color.lower()
    if normalized_color in mapping:
        return mapping[normalized_color].capitalize()
    else:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª
        error_text = f"–ù–µ —É–¥–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ü–≤–µ—Ç: {color}"
        with open('output.txt', 'a') as file:
            file.write(f"{error_text}\n")
        return color  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω


def load_price_data(file_path: str = "./src/data/dealer-cars_price.json") -> Dict[str, Dict[str, int]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞.
    
    Args:
        file_path (str): –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
        
    Returns:
        Dict[str, Dict[str, int]]: –°–ª–æ–≤–∞—Ä—å —Å —Ü–µ–Ω–∞–º–∏ –ø–æ VIN
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return json.load(file)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ —Ü–µ–Ω: {str(e)}")
        return {}


def update_car_prices(car_data: dict, prices_data: Dict[str, Dict[str, int]]) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è (car_data).
    
    Args:
        car_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–∫–ª—é—á–∏: vin, priceWithDiscount, sale_price, max_discount, price)
        prices_data: –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –∏–∑ JSON (–∫–ª—é—á–∏: VIN, –∑–Ω–∞—á–µ–Ω–∏—è: —Å–ª–æ–≤–∞—Ä—å —Å —Ü–µ–Ω–∞–º–∏)
    """
    # –ü–æ–ª—É—á–∞–µ–º VIN –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    vin = car_data.get('vin')
    if not vin:
        print("–ö–ª—é—á 'vin' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π –≤ car_data")
        return
    print(f"üîë –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å VIN: {vin}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π
    try:
        current_sale_price = int(car_data.get('priceWithDiscount', 0) or 0)
    except ValueError:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å 'priceWithDiscount' –≤ —á–∏—Å–ª–æ –¥–ª—è VIN: {vin}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ VIN –≤ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö
    if vin not in prices_data:
        return
    car_prices = prices_data[vin]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö
    required_keys = ["–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞", "–°–∫–∏–¥–∫–∞", "–†–†–¶"]
    if not all(key in car_prices for key in required_keys):
        print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è VIN: {vin}")
        return

    final_price = car_prices["–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞"]
    if final_price <= current_sale_price:
        discount = car_prices["–°–∫–∏–¥–∫–∞"]
        rrp = car_prices["–†–†–¶"]
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ car_data
        car_data['priceWithDiscount'] = final_price
        car_data['sale_price'] = final_price
        car_data['max_discount'] = discount
        car_data['price'] = rrp


def get_xml_content(filename: str, xml_url: str) -> ET.Element:
    """
    –ü–æ–ª—É—á–∞–µ—Ç XML –∫–æ–Ω—Ç–µ–Ω—Ç –ª–∏–±–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –ª–∏–±–æ –ø–æ URL.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
    
    Args:
        filename: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É XML —Ñ–∞–π–ª—É
        xml_url: URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ XML –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    
    Returns:
        ET.Element: –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç XML –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
    """
    if os.path.exists(filename):
        tree = ET.parse(filename)
        return tree.getroot()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ xml_url –∑–∞–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
    if not xml_url:
        print(f"[get_xml_content] –ù–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª '{filename}' –∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ xml_url. –í–æ–∑–≤—Ä–∞—â–∞—é None.")
        return None
    try:
        import requests
        response = requests.get(xml_url, timeout=10)
        response.raise_for_status()
        content = response.content

        # –£–±—Ä–∞—Ç—å BOM, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if content.startswith(b'\xef\xbb\xbf'):
            content = content[3:]

        xml_content = content.decode('utf-8')
        return ET.fromstring(xml_content)
    except Exception as e:
        print(f"[get_xml_content] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å XML –ø–æ —Å—Å—ã–ª–∫–µ '{xml_url}': {e}. –í–æ–∑–≤—Ä–∞—â–∞—é None.")
        return None


def setup_directories(thumbs_dir: str, cars_dir: str) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    
    Args:
        thumbs_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        cars_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –º–∞—à–∏–Ω
    """
    if not os.path.exists(thumbs_dir):
        os.makedirs(thumbs_dir)
    
    if not os.path.exists(cars_dir):
        os.makedirs(cars_dir)
        # shutil.rmtree(cars_dir)


def should_remove_car(car: ET.Element, mark_ids: list, folder_ids: list) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
    
    Args:
        car (ET.Element): XML —ç–ª–µ–º–µ–Ω—Ç –º–∞—à–∏–Ω—ã.
        mark_ids (list): –°–ø–∏—Å–æ–∫ ID –º–∞—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
        folder_ids (list): –°–ø–∏—Å–æ–∫ ID –ø–∞–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    
    Returns:
        bool: True –µ—Å–ª–∏ –º–∞—à–∏–Ω—É –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –∏–Ω–∞—á–µ False.
    """
    def element_in_list(element_names, check_list):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ.
        
        Args:
            element_names (list): –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
            check_list (list): –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
        
        Returns:
            bool: True, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å –≤ check_list.
        """
        for name in element_names:
            try:
                value = car.find(name)
                if value is not None and value.text in check_list:
                    return True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ '{name}': {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    if mark_ids and element_in_list(['mark_id', 'Make', 'brand'], mark_ids):
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    if folder_ids and element_in_list(['folder_id', 'Model', 'model'], folder_ids):
        return True
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –∞–≤—Ç–æ–º–æ–±–∏–ª—å –æ—Å—Ç–∞–≤–ª—è–µ–º
    return False

def check_local_files(brand, model, color, vin):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    folder = get_folder(brand, model, vin)
    if folder:
        color_image = get_color_filename(brand, model, color, vin)
        if color_image:

            thumb_path = os.path.join("img", "models", folder, "colors", color_image)
            thumb_brand_path = os.path.join("img", "models", brand.lower(), folder, "colors", color_image)
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if os.path.exists(f"public/{thumb_path}"):
                return f"/{thumb_path}"
            elif os.path.exists(f"public/{thumb_brand_path}"):
                return f"/{thumb_brand_path}"
            else:
                errorText = f"\nvin: <code>{vin}</code>\n<b>–ù–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª</b>\n<pre>{color_image}</pre>\n<code>public/{thumb_path}</code>\n<code>public/{thumb_brand_path}</code>"
                print_message(errorText)
                return "https://cdn.alexsab.ru/errors/404.webp"
        else:
            return "https://cdn.alexsab.ru/errors/404.webp"
    else:
        return "https://cdn.alexsab.ru/errors/404.webp"


def create_file(car_data, filename, friendly_url, current_thumbs, sort_storage_data, dealer_photos_for_cars_avito, config, existing_files):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å frontmatter –≤ —Ñ–æ—Ä–º–∞—Ç–µ YAML –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è car_data (dict).
    Args:
        car_data: dict —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        filename: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    vin = car_data.get('vin')
    if not vin:
        return
    vin_hidden = process_vin_hidden(vin)
    color = str(car_data.get('color', '')).capitalize()
    model = car_data.get('folder_id', '')
    brand = car_data.get('mark_id', '')

    # –ü–æ–ª—É—á–∞–µ–º folder –∏ color_image –¥–ª—è CDN
    folder = get_folder(brand, model, vin)
    color_image = get_color_filename(brand, model, color, vin)

    thumb = "https://cdn.alexsab.ru/errors/404.webp"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ CDN —Å–µ—Ä–≤–∏—Å
    if folder and not config['skip_check_thumb']:
        if color_image:
            cdn_path = f"https://cdn.alexsab.ru/b/{brand.lower()}/img/models/{folder}/colors/{color_image}"
            try:
                response = requests.head(cdn_path)
                if response.status_code == 200:
                    thumb = cdn_path
                else:
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CDN, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                    errorText = f"\n<b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –Ω–∞ CDN</b>. –°—Ç–∞—Ç—É—Å <b>{response.status_code}</b>\n<pre>{color_image}</pre>\n<a href='{cdn_path}'>{cdn_path}</a>"
                    print_message(errorText, 'error')
                    thumb = check_local_files(brand, model, color, vin)
            except requests.RequestException as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ CDN, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                errorText = f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ CDN: {str(e)}"
                print_message(errorText, 'error')
                thumb = check_local_files(brand, model, color, vin)

    data = dict(car_data)  # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è –∏–∑ car_data
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ (order)
    if vin in sort_storage_data:
        order = sort_storage_data[vin]
    else:
        sort_storage_data['order'] = sort_storage_data.get('order', 0) + 1
        order = sort_storage_data['order']
    data['order'] = order
    data['vin_list'] = vin
    data['vin_hidden'] = vin_hidden
    data['color'] = color
    data['image'] = thumb

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º total
    data['total'] = int(car_data.get('total', 1))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ extras
    if 'extras' in car_data and car_data['extras']:
        data['extras'] = str(car_data['extras']).replace('\n', '<br>\n')
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ equipment
    if 'equipment' in car_data and car_data['equipment']:
        equipment = str(car_data['equipment']).replace('\n', '<br>\n').replace(':', '').replace('üìû', '')
        data['equipment'] = equipment

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è h1, breadcrumb, title, description
    data['h1'] = get_h1(car_data, config)
    data['breadcrumb'] = get_breadcrumb(car_data, config)
    data['title'] = get_title(car_data, config)
    data['description'] = get_description(car_data, config)

    # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    description_for_content = car_data.get('description', '')
    if vin in dealer_photos_for_cars_avito and dealer_photos_for_cars_avito[vin]['description'] and not description_for_content:
        description_for_content = dealer_photos_for_cars_avito[vin]['description']

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images = car_data.get('images', [])
    if vin in dealer_photos_for_cars_avito:
        new_images = [img for img in dealer_photos_for_cars_avito[vin]['images'] if img not in images]
        images.extend(new_images)
    data['images'] = images
    thumbs_files = createThumbs(images, friendly_url, current_thumbs, config['thumbs_dir'], config['temp_thumbs_dir'], config['skip_thumbs'], config['count_thumbs'])
    data['thumbs'] = thumbs_files

    # –ü—Ä–∏–≤–æ–¥–∏–º –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è –∫ int, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    for key in ["max_discount", "price", "priceWithDiscount", "run", "sale_price", "year", "credit_discount", "optional_discount", "insurance_discount", "tradein_discount"]:
        if key in data and data[key] is not None:
            try:
                data[key] = int(str(data[key]).replace(" ", "").replace("\u00a0", ""))
            except Exception:
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —á–∏—Å–ª—É, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å

    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ YAML
    content = "---\n"
    content += yaml.safe_dump(data, default_flow_style=False, allow_unicode=True)
    content += "---\n"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ description –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content += process_description(description_for_content)

    # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    with open(filename, 'w') as f:
        f.write(content)
    print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {filename}")
    existing_files.add(filename)

def format_value(value: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    
    Args:
        value (str): –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    """
    if "'" in value:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–¥–∏–Ω–∞—Ä–Ω–∞—è –∫–∞–≤—ã—á–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
        return f'"{value}"'
    elif ":" in value:  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
        return f"'{value}'"
    return value

def update_yaml(car_data, filename, friendly_url, current_thumbs, sort_storage_data, dealer_photos_for_cars_avito, config, existing_files):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç YAML-—Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É—è car_data (dict) –≤–º–µ—Å—Ç–æ XML-—ç–ª–µ–º–µ–Ω—Ç–∞.
    """
    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {filename}")
    with open(filename, "r", encoding="utf-8") as f:
        content = f.read()

    # Split the content by the YAML delimiter
    yaml_delimiter = "---\n"
    parts = content.split(yaml_delimiter)

    # If there's no valid YAML block, raise an exception
    if len(parts) < 3:
        raise ValueError("No valid YAML block found in the provided file.")

    # Parse the YAML block
    yaml_block = parts[1].strip()
    data = yaml.safe_load(yaml_block)
    vin = car_data.get('vin')
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ vin —É–∂–µ –µ—Å—Ç—å –≤ vin_list, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª (–ª–æ–≥–∏–∫–∞ –Ω–∞ dict)
    if vin and 'vin_list' in data and vin in [v.strip() for v in data['vin_list'].split(',')]:
        for thumb in data.get('thumbs', []):
            if thumb not in current_thumbs:
                current_thumbs.append(f"public{thumb}")
        existing_files.add(filename)
        print(f"–¢–∞–∫–æ–π VIN {vin} —É–∂–µ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ")
        return filename
    if vin:
        data['vin_list'] += ", " + vin

    vin_hidden = process_vin_hidden(vin)
    if vin_hidden:
        data['vin_hidden'] += ", " + vin_hidden
    if 'unique_id' in car_data:
        if not isinstance(data.get('unique_id', ''), str):
            data['unique_id'] = str(data.get('unique_id', ''))
        data['unique_id'] += ", " + str(car_data['unique_id'])
    elif 'id' in car_data:
        if not isinstance(data.get('id', ''), str):
            data['id'] = str(data.get('id', ''))
        data['id'] += ", " + str(car_data['id'])

    if 'total' in data and 'total' in car_data:
        try:
            car_total_value = int(car_data['total'])
            data_total_value = int(data['total'])
            data['total'] = data_total_value + car_total_value
        except ValueError:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ int, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    else:
        data['total'] = data.get('total', 1) + 1

    if 'run' in data and 'run' in car_data:
        try:
            car_run_value = int(car_data['run'])
            data_run_value = int(data['run'])
            data['run'] = min(data_run_value, car_run_value)
        except ValueError:
            pass
    else:
        data.setdefault('run', 0)

    if 'priceWithDiscount' in data and 'priceWithDiscount' in car_data:
        try:
            car_priceWithDiscount_value = int(car_data['priceWithDiscount'])
            data_priceWithDiscount_value = int(data['priceWithDiscount'])
            data['priceWithDiscount'] = min(data_priceWithDiscount_value, car_priceWithDiscount_value)
            data['sale_price'] = min(data_priceWithDiscount_value, car_priceWithDiscount_value)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_description –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ description
            data["description"] = get_description(car_data, config)
        except ValueError:
            pass

    if 'max_discount' in data and 'max_discount' in car_data:
        try:
            car_max_discount_value = int(car_data['max_discount'])
            data_max_discount_value = int(data['max_discount'])
            data['max_discount'] = max(data_max_discount_value, car_max_discount_value)
        except ValueError:
            pass

    if 'order' not in data:
        if vin in sort_storage_data:
            order = sort_storage_data[vin]
        else:
            # If VIN doesn't exist, increment the current order and use it
            sort_storage_data['order'] = sort_storage_data.get('order', 0) + 1
            order = sort_storage_data['order']
        data['order'] = order

    images = car_data.get('images', [])
    if vin in dealer_photos_for_cars_avito:
        new_images = [img for img in dealer_photos_for_cars_avito[vin]['images'] if img not in images]
        images.extend(new_images)
    if images:
        existing_images = data.get('images', [])
        unique_images = list(dict.fromkeys(existing_images + images))
        data['images'] = unique_images
        if 'thumbs' not in data or (len(data['thumbs']) < 5):
            thumbs_files = createThumbs(images, friendly_url, current_thumbs, config['thumbs_dir'], config['temp_thumbs_dir'], config['skip_thumbs'], config['count_thumbs'])
            data.setdefault('thumbs', []).extend(thumbs_files)
    updated_yaml_block = yaml.safe_dump(data, default_flow_style=False, allow_unicode=True)

    # Reassemble the content with the updated YAML block
    updated_content = yaml_delimiter.join([parts[0], updated_yaml_block, yaml_delimiter.join(parts[2:])])

    existing_files.add(filename)
    # Save the updated content to the output file
    with open(filename, "w", encoding="utf-8") as f:
        f.write(updated_content)

    return filename


# –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å a-z + 0-9
chars = string.ascii_lowercase + string.digits
base = len(chars)  # –û—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏—Å—á–∏—Å–ª–µ–Ω–∏—è (36)

def vin_to_number(vin):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã VIN –≤ —á–∏—Å–ª–æ."""
    if not vin[-5:].isdigit():
        raise ValueError("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ VIN –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏.")
    
    return int(vin[-5:])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ VIN –≤ —á–∏—Å–ª–æ

def number_to_vin(vin, number):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ VIN."""
    new_suffix = str(number).zfill(5)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
    return vin[:-5] + new_suffix  # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π VIN

def modify_vin(vin, increment):
    """–ò–∑–º–µ–Ω—è–µ—Ç VIN –ø—É—Ç–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ñ—Ä."""
    vin_number = vin_to_number(vin)  # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Ü–∏—Ñ—Ä VIN
    new_vin_number = vin_number + increment  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    return number_to_vin(vin, new_vin_number)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ VIN

def str_to_base36(str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É STR –≤ —á–∏—Å–ª–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º—ã —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 36."""
    value = 0
    for char in str:
        value = value * base + chars.index(char)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –≤ —á–∏—Å–ª–æ
    return value

def base36_to_str(value, length):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É STR –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º—ã —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 36."""
    str = []
    while value > 0:
        str.append(chars[value % base])
        value //= base
    return ''.join(reversed(str)).zfill(length)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–∏ –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

def increment_str(str, increment):
    """–ò–∑–º–µ–Ω—è–µ—Ç STR –ø—É—Ç–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ increment."""
    str_value = str_to_base36(str)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º STRING –≤ —á–∏—Å–ª–æ
    new_str_value = str_value + increment  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    return base36_to_str(new_str_value, len(str))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É

def duplicate_car(car, config, n, status="–≤ –ø—É—Ç–∏", offset=0):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ 'car' N —Ä–∞–∑ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º vin."""
    duplicates = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π 'VIN' –∏ 'Availability'
    try:
        if car.find(config['vin_tag']) is None:
            raise ValueError(f"–≠–ª–µ–º–µ–Ω—Ç 'car' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è '{config['vin_tag']}'")
        if car.find(config['availability_tag']) is None:
            raise ValueError(f"–≠–ª–µ–º–µ–Ω—Ç 'car' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è '{config['availability_tag']}'")
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return duplicates  # –í–µ—Ä–Ω–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
    
    for i in range(n):
        try:
            new_car = copy.deepcopy(car)  # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç car
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º VIN
            vin = new_car.find(config['vin_tag']).text
            new_vin = modify_vin(vin.lower(), offset+i+1)
            new_car.find(config['vin_tag']).text = new_vin.upper()  # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç VIN
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º unique_id, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            unique_id_element = new_car.find(config['unique_id_tag'])
            if unique_id_element is not None:
                unique_id = unique_id_element.text
                new_unique_id = increment_str(unique_id, offset + i + 1)  # –ò–∑–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –Ω–∞ i
                unique_id_element.text = new_unique_id  # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç unique_id
                print(vin, new_vin, unique_id, new_unique_id)
            else:
                print(vin, new_vin, f"${config['unique_id_tag']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            new_car.find(config['availability_tag']).text = status  # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ù–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            duplicates.append(new_car)
        
        except AttributeError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
    
    return duplicates

def load_env_config(source_type: str, default_config) -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    –§–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
    CARS_[SOURCE_TYPE]_[PARAM_NAME] = value
    
    –ù–∞–ø—Ä–∏–º–µ—Ä:
    CARS_AUTORU_REMOVE_MARK_IDS = '["mark1", "mark2"]'
    CARS_AVITO_ELEMENTS_TO_LOCALIZE = '["elem1", "elem2"]'
    """
    prefix = f"CARS_{source_type.upper()}_"
    
    # –ú–∞–ø–ø–∏–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ –∫–ª—é—á–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    env_mapping = {
        f"{prefix}MOVE_VIN_ID_UP": "move_vin_id_up",
        f"{prefix}NEW_ADDRESS": "new_address",
        f"{prefix}NEW_PHONE": "new_phone",
        f"{prefix}REPLACEMENTS": "replacements",
        f"{prefix}ELEMENTS_TO_LOCALIZE": "elements_to_localize",
        f"{prefix}REMOVE_CARS_AFTER_DUPLICATE": "remove_cars_after_duplicate",
        f"{prefix}REMOVE_MARK_IDS": "remove_mark_ids",
        f"{prefix}REMOVE_FOLDER_IDS": "remove_folder_ids"
    }
    
    for env_var, config_key in env_mapping.items():
        if env_var in os.environ:
            try:
                value = json.loads(os.environ[env_var])
                default_config[config_key] = value
            except json.JSONDecodeError:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {env_var}")
                # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    return default_config

def load_github_config(source_type: str, github_config: Dict[str, str], default_config) -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–ª–∏ Gist.
    
    :param source_type: –¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (autoru –∏–ª–∏ avito)
    :param github_config: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ GitHub
    :return: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    """
    if 'GITHUB_TOKEN' in os.environ:
        headers = {'Authorization': f'token {os.environ["GITHUB_TOKEN"]}'}
    else:
        headers = {}

    try:
        if 'gist_id' in github_config:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Gist
            gist_url = f"https://api.github.com/gists/{github_config['gist_id']}"
            response = requests.get(gist_url, headers=headers)
            response.raise_for_status()
            gist_data = response.json()
            
            # –ò—â–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            for filename, file_data in gist_data['files'].items():
                if source_type in filename.lower():
                    return json.loads(file_data['content'])
                    
        elif 'repo' in github_config and 'path' in github_config:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            repo = github_config['repo']
            path = github_config['path']
            file_url = f"https://api.github.com/repos/{repo}/contents/{path}/{source_type}.json"
            
            response = requests.get(file_url, headers=headers)
            response.raise_for_status()
            
            content = response.json()['content']
            import base64
            decoded_content = base64.b64decode(content).decode('utf-8')
            return json.loads(decoded_content)
            
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ GitHub: {e}")
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    except KeyError as e:
        print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return default_config

def load_file_config(config_path: str, source_type: str, default_config) -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞.
    """
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
            return config.get(source_type, default_config)
    except FileNotFoundError:
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return default_config
    except json.JSONDecodeError:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {config_path}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return default_config

def extract_image_urls(images_container, image_tag):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–Ω–∞—á–∞–ª–∞ –∞—Ç—Ä–∏–±—É—Ç 'url', –∑–∞—Ç–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞.
    
    Args:
        images_container: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        image_tag: –¢–µ–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    images = []
    for i, img in enumerate(images_container.findall(image_tag)):
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ 'url'
        url = img.get('url')
        if url:
            images.append(url)
        else:
            # –ï—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
            if img.text and img.text.strip():
                url = img.text.strip()
                images.append(url)
            else:
                print(f"  ‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å URL (–Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'url' –∏ —Ç–µ–∫—Å—Ç–∞)")
    return images

def render_template_string(template: str, car, config):
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤–∏–¥–∞ {{car.field}} –∏ {{config.field}} –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ car (dict) –∏ config —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
    –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ dict –¥–ª—è car.
    –ü—Ä–∏–º–µ—Ä: '{{car.mark_id}} {{car.folder_id}} —É {{config.legal_city_where}}'
    """
    def get_car_value(field):
        # –¢–µ–ø–µ—Ä—å car - —ç—Ç–æ dict, –∞ –Ω–µ XML
        return str(car.get(field, ''))
    def get_config_value(field):
        return config.get(field, '')

    def replacer(match):
        expr = match.group(1).strip()
        if expr.startswith('car.'):
            return get_car_value(expr[4:])
        elif expr.startswith('config.'):
            return str(get_config_value(expr[7:]))
        else:
            return match.group(0)  # –Ω–µ –º–µ–Ω—è–µ–º, –µ—Å–ª–∏ –Ω–µ car/config

    # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤–∏–¥–∞ {{...}}
    return re.sub(r'\{\{\s*([^}]+)\s*\}\}', replacer, template)

def get_h1(car, config):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç h1 –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ —à–∞–±–ª–æ–Ω—É (car - dict)."""
    template = config.get('h1_template') or '{{car.mark_id}} {{car.folder_id}} {{car.modification_id}}'
    return render_template_string(template, car, config).strip()

def get_breadcrumb(car, config):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç breadcrumb –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ —à–∞–±–ª–æ–Ω—É (car - dict)."""
    template = config.get('breadcrumb_template') or '{{car.mark_id}} {{car.folder_id}} {{car.complectation_name}}'
    return render_template_string(template, car, config).strip()

def get_title(car, config):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç title –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ —à–∞–±–ª–æ–Ω—É (car - dict)."""
    template = config.get('title_template') or '–ö—É–ø–∏—Ç—å {{car.mark_id}} {{car.folder_id}} {{car.modification_id}} {{car.color}} —É –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞ –≤ {{config.legal_city_where}}'
    return render_template_string(template, car, config).strip()

def get_description(car, config):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç description –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ —à–∞–±–ª–æ–Ω—É (car - dict)."""
    template = config.get('description_template') or (
        '–ö—É–ø–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å {{car.mark_id}} {{car.folder_id}}'
        '{% if car.year %} {{car.year}} –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞{% endif %}'
        '{% if car.complectation_name %}, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è {{car.complectation_name}}{% endif %}'
        '{% if car.color %}, —Ü–≤–µ—Ç - {{car.color}}{% endif %}'
        '{% if car.modification_id %}, –¥–≤–∏–≥–∞—Ç–µ–ª—å - {{car.modification_id}}{% endif %}'
        ' —É –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞ –≤ –≥. {{config.legal_city}}. –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {{car.mark_id}} {{car.folder_id}} ‚Äì {{car.priceWithDiscount}}'
    )
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ {% if ... %} ... {% endif %}, –µ—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ
    def if_replacer(match):
        expr = match.group(1).strip()
        # –ü—Ä–∏–º–µ—Ä: car.year
        if expr.startswith('car.'):
            field = expr[4:]
            if car.get(field):
                return match.group(2)
            else:
                return ''
        return ''
    template = re.sub(r'\{% if ([^%]+)%\}([\s\S]*?)\{% endif %\}', if_replacer, template)
    return render_template_string(template, car, config).strip()
