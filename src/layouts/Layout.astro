---
interface Props {
	title?: string;
	h1?: string;
	description?: string;
	image?: string;
	keywords?: string;
}
let {title, h1, description, image, keywords} = Astro.props;

import settings from '@/data/settings.json';
const { site_name, site_description } = settings;

import Head from '@/components/Head.astro';
import ScriptHead from '@/components/Scripts/Head.astro';
import ScriptBodyBegin from '@/components/Scripts/BodyBegin.astro';
import ScriptBodyEnd from '@/components/Scripts/BodyEnd.astro';
import Header from '@/components/Header/Header.astro';
import Footer from '@/components/ExtendedFooter.astro';
import Modals from '@/components/Modals.astro';
import UpBtn from '@/components/UpBtn.astro';
import Cookie from '@/components/Cookie/Cookie.astro';
import seo from '@/data/seo.json';
import StripEmptyQuery from '../components/StripEmptyQuery.astro';

const currentPath = Astro.url.pathname;
if (seo[currentPath]) {
	const pageSeo = seo[currentPath];

	if (pageSeo.title && pageSeo.title.trim()) {
		title = pageSeo.title;
	}

	if (pageSeo.description && pageSeo.description.trim()) {
		description = pageSeo.description;
	}

	if (pageSeo.keywords && pageSeo.keywords.trim()) {
		keywords = pageSeo.keywords;
	}

	if (pageSeo.h1 && pageSeo.h1.trim()) {
		h1 = pageSeo.h1;
	}

	if (pageSeo.image && pageSeo.image.trim()) {
		image = pageSeo.image;
	}
}
---

<!doctype html>
<html lang="ru">
	<head>
		<StripEmptyQuery />
		<Head title={title || h1 || site_name} description={description ?? site_description} image={image} keywords={keywords} />
		<ScriptHead />
	</head>
	<body class="min-h-screen flex flex-col" x-data="complectation">
		<ScriptBodyBegin />
		<Header />
		<main class="flex-grow relative">
			<slot />
		</main>
		<Footer />
		<Modals />
		<UpBtn />
		<Cookie />
		<ScriptBodyEnd />
	</body>
</html>
<style is:global lang="scss">
	@use '@/scss/app.scss';
</style>
