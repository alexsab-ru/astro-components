---
import type {TBreadcrumb} from '@/components/Breadcrumbs/types'
interface Props {
	model: any;
	breadcrumb?: TBreadcrumb[];
}
const {model, breadcrumb} = Astro.props;

import {Icon} from 'astro-icon/components';
import Breadcrumbs from '@/components/Breadcrumbs/Breadcrumbs.astro';
import './model.scss';
import { currencyFormat } from '@/js/utils/numbers.format';
const photoSlides = !model.photos
	? []
	: [].concat(
			...Object.values(
				await fetch(model.photos).then((response) =>
					response.json()
				)
			)
	  );
import Button from '@/components/Button/Button.astro';
import ColorLink from '@/components/ColorLink/ColorLink.astro'
const carImagePath = model.colors[0].carImage || `/img/${model.id}/${model.colors[0].id}.png`;
---

<section class="model model-section relative" id={model?.id} data-dir={model?.id}>
	{model?.badge && (
		<img src={model?.badge?.imgModelPage || model?.badge.img} alt={model?.badge.alt} class="absolute right-4 top-4 xs:h-10 h-16 sm:h-24 w-auto z-10">
	)}
	<div
		class="model__info"
		style={`background-image: url(${model?.homeImg})`}>
		<div class="container h-full pt-8 sm:pt-[2.5%] xl:pb-10">
			{breadcrumb && <Breadcrumbs breadcrumb={breadcrumb} color="white" />}
			<div class="flex justify-between items-start flex-col lg:flex-row">
				<div>
					<h2
						class="text-2xl sm:text-5xl text-white tracking-wider font-medium uppercase before:hidden mx-0">
						{model.mark_id}
						<b
							class="font-medium tracking-tighter xs:text-3xl text-5xl sm:text-8xl uppercase text-white"
							>{model?.name}</b
						>
					</h2>
					{
						model.slogan && (
						<p class="uppercase text-lg sm:text-2xl opacity-80">
							{model.slogan}
						</p>
						)
					}
					{
						model?.price && (
						<p class="uppercase text-3xl sm:text-4xl">
							<span class="text-sm text-gray-400">от</span>&nbsp;{currencyFormat(model.price)}
						</p>
						)
					}
				</div>
			</div>

			<div class="flex flex-col gap-4 mt-10 lg:mt-14">
				{
					model?.benefits && model.benefits.map(benefit => (
					<a
						class={`w-fit inline-flex items-center flex-nowrap gap-1.5 last:pb-5 text-white font-medium text-base sm:text-xl group ${benefit.view === 'popup-link' ? 'popup-link' : ''}`}
						href={benefit?.url ? benefit.url : '#'}
						data-title={benefit?.data_title}
						data-form_name={benefit?.data_form_name}
					>
						<span
							class="w-10 h-10 rounded-full bg-accent-500 text-white flex items-center justify-center">
							{
								benefit.icon_name && (
									<Icon name={benefit.icon_name} class="text-2xl" />
								)
							}
						</span>
						{
							benefit.label && (
							<span
								class="translate-x-0 transition-transform duration-300 ease-in-out group-hover:translate-x-1">
								<Fragment set:html={benefit.label} />
							</span>
							)
						}
					</a>
					))
				}
			</div>
		</div>
	</div>

	<div class={`w-full lg:w-3/4 2xl:w-3/5 relative z-10 top-0 lg:top-[150px] xl:top-[120px] lg:pb-[120px] xl:pb-[120px] ${model?.centered ? 'mx-auto' : 'ml-auto'}`}>
		<div class="flex flex-col justify-center">
			<img
				src={carImagePath}
				class="w-full color-img-preview"
				alt={`${model.mark_id} ${model?.name}`}
			/>
			<div class="flex flex-wrap justify-center gap-4 sm:gap-5 color-links">
				{
					model.colors &&
						model.colors.map((c: any, idx: number) => (
							<ColorLink title={c.name} id={c.id} idx={idx} carImage={c.carImage} style={c.style} />
						))
				}
				<p class="w-full text-center text-xs color-name text-black">
					{model.colors[0]?.name}
				</p>
			</div>
		</div>
	</div>

	{
		photoSlides.length > 0 && (
			<div class="container px-0 sm:px-5">
				<div class="swiper photo-slider h-[120px] md:h-[200px] mt-14">
					<div class="swiper-wrapper">
						{photoSlides.map((photo) => (
							<a
								href={photo}
								class="swiper-slide glightbox image-slide"
								data-gallery={`gallery-${model.id}`}>
								<img src={photo} loading="lazy" />
								<div class="swiper-lazy-preloader" />
							</a>
						))}
					</div>
				</div>
			</div>
		)
	}

	<div class="container">
		{
			model.globalChars && (
				<div class="flex justify-center flex-wrap gap-4 mt-10 lg:mt-14 text-black">
					{model.globalChars.map((char: any) => (
						<div class="flex flex-col justify-between gap-4 sm:gap-8 xs:p-3 p-4 shadow rounded w-[calc((100%/2)-8px)] sm:w-[calc((100%/3)-11px)] xl:w-[calc((100%/6)-14px)]">
							<div class="text-xs sm:text-base">{char.title}:</div>
							<div>
								<b class="xs:text-xl text-2xl sm:text-3xl 2xl:text-4xl font-medium">
									{char.value}
								</b>{' '}
								<span class="xs:text-[11px]">
									{char?.measure}
								</span>
							</div>
						</div>
					))}
				</div>
			)
		}

		<div class="flex justify-center flex-wrap xs:flex-col gap-4 mt-14">
			<Button
				classes="popup-link btn black btn-o !px-4 flex-1 whitespace-nowrap"
				url="#common-modal"
				title="Купить"
				dataTitle={`Купить ${model.mark_id}`}
				dataFormName={`Купить. ${model.mark_id} ${model.name}`}
			/>
			<Button
				classes="popup-link btn !px-4 flex-1 whitespace-nowrap"
				url="#common-modal"
				title="Рассчитать кредит"
				dataTitle="Рассчитать кредит"
				dataFormName={`Рассчитать кредит. ${model.mark_id} ${model.name}`}
			/>
			<Button
				classes="popup-link btn gray !px-4 flex-1 whitespace-nowrap"
				url="#common-modal"
				title="Записаться на тест-драйв"
				dataTitle="Записаться на тест-драйв"
				dataFormName={`Записаться на тест-драйв. ${model.mark_id} ${model.name}`}
			/>
			<Button
				classes="popup-link btn black !px-4 flex-1 whitespace-nowrap"
				url="#common-modal"
				title="Узнать цену по акции"
				dataTitle="Узнать цену по акции"
				dataFormName={`Узнать цену по акции. ${model.mark_id} ${model.name}`}
			/>
			{ (model?.complectations !== undefined && model?.complectations.length) ? (
				<Button
					classes="btn black btn-o !px-4 flex-1 whitespace-nowrap"
					view="scroll-link"
					url="#complectation"
					title="Подобрать комплектацию"
				/>
			) : (
				<Button
					classes="popup-link btn black btn-o !px-4 flex-1 whitespace-nowrap"
					view="popup-link"
					url="#common-modal"
					title="Подобрать комплектацию"
					dataTitle="Подобрать комплектацию"
					dataFormName={`Подобрать комплектацию. ${model.mark_id} ${model?.name}`}
				/>
			)}
		</div>
	</div>
</section>

<style lang="scss">
	.image-slide {
		@apply relative h-full cursor-zoom-in inline-flex w-auto;
		&.swiper-slide-active {
			img {
				@apply brightness-100;
			}
		}
		img {
			@apply relative h-full w-full object-cover object-center inset-0 brightness-50 transition-[filter] duration-500 ease-in-out hover:brightness-110;
		}
	}
</style>

<script>
	import GLightbox from 'glightbox';
	import Swiper from 'swiper';
	import {Autoplay} from 'swiper/modules';
	const photo = new Swiper('.photo-slider', {
		modules: [Autoplay],
		loop: true,
		centeredSlides: true,
		slidesPerView: 'auto',
		speed: 100,
		autoplay: {
			// enabled: true,
			disableOnInteraction: false,
			waitForTransition: false,
			delay: 5000,
		},
		breakpoints: {
			320: {
				spaceBetween: 5,
			},
			640: {
				spaceBetween: 10,
			},
			1280: {
				spaceBetween: 10,
			},
		},
	});

	if (photo) {
		GLightbox({
			loop: true,
		});
	}
</script>
