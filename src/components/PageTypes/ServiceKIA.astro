---
import Layout from '@/layouts/Layout.astro';
import Banner from '@/components/Banner/Banner.astro';
import SpecialServices from '@/components/SpecialServices/Index.astro';
import Faq from '@/components/Faq/Index.astro';
import NewServices from '@/components/Services/New.astro';
import ReviewsSlider from '@/components/Reviews/Index.astro';
import settings from '@/data/settings.json';
const { site_name, brand, legal_city_where } = settings;
import {TIMER, MARQUEE, REVIEWS_LIMIT} from '@/const.js';
import PageH1 from '@/components/PageH1/Index.astro';
import Timer from '@/components/Timer/Timer.astro';
import ModelList from '@/components/Model/ModelList.astro';
import LatestPosts from '@/components/LatestPosts/Index.astro';
import Model from '@/components/Model/Model.astro';
import ModelComplectations from '@/components/Model/Complectations.astro';
import Callback from '@/components/Callback.astro';
import Services from '@/components/Services.astro';
import Contacts from '@/components/Contacts.astro';
import Morquee from '@/components/Marquee/Index.astro';

import modelsData from '@/data/models.json'
const { models } = modelsData;

import salonsData from '@/data/salons.json';
import type { ISalon } from '@/types/ISalon';
const salons = salonsData.filter((salon: ISalon) => !salon?.type || salon?.type.includes('index'));
const modelsWithComplectations = models.filter(m => (m?.complectations !== undefined && m?.complectations.length));
import specialServicesData from '@/data/special-services.json'
import faqData from '@/data/faq.json'
import servicesData from '@/data/services.json'
import allReviewsData from '@/data/reviews.json'

const reviewsData = allReviewsData.slice(0, REVIEWS_LIMIT);

const salonsPhone = salons.map((salon: any) => salon.phone).filter(phone => phone).join(', ');
import SeoText from '@/components/Seo/Index.astro';

import FaqItem from '@/components/Faq/Item.astro';
import { type TFaqItem } from '@/components/Faq/types';
import Table from '@/components/Table/Table.astro';
import fs from 'node:fs';
import path from 'node:path';

// Парсим JSON и готовим данные для заголовков аккордеона + таблиц
// Получить файл с таблицей можно командой pnpm run get_table_services_json
// Используем путь от корня проекта (работает и в dev, и в build)
const jsonPath = path.resolve(process.cwd(), 'src/data/tables/services.json');

// Проверяем существование файла и создаем faqBlocks
// Если файл отсутствует - компонент работает без таблицы услуг
let faqBlocks = [];

if (fs.existsSync(jsonPath)) {
	// Читаем JSON файл с услугами
	const servicesJsonData = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'));

	// Группируем услуги по типу
	const servicesGrouped: Record<string, any[]> = {};
	servicesJsonData.forEach((service: any) => {
		const type = service['Тип'];
		if (!servicesGrouped[type]) {
			servicesGrouped[type] = [];
		}
		servicesGrouped[type].push(service);
	});

	// Создаем faqBlocks для использования в компоненте FaqItem + Table
	faqBlocks = Object.entries(servicesGrouped).map(([type, services], index) => {
		// Создаем item для FaqItem (заголовок аккордеона)
		const item: TFaqItem = {
			id: index,
			question: type,  // Название типа услуги (например, "Диагностика")
			answer: '',  // Не используется, т.к. контент будет таблицей
			open: false  // По умолчанию аккордеон закрыт
		};
		
		// Создаем rows для Table (данные таблицы)
		// Фильтруем услуги: показываем только те, у которых есть цена
		const rows = services
			.filter(service => service['цена от'] !== null)  // Исключаем услуги без цены
			.map(service => ({
				name: service['Работы'],  // Наименование работы
				price: service['цена от'].toLocaleString('ru-RU')  // Форматируем цену по российским стандартам (456 000)
		}));
		
		return { item, rows };
	})
	.filter(({ rows }) => rows.length > 0);  // Исключаем группы без услуг с ценами
}

---

<Layout title=`Купить ${brand} у официального дилера ${site_name}` description=`Забронируйте свой автомобиль прямо сейчас у официального дилера ${brand} в ${legal_city_where}! ☎️ ${salonsPhone}`>
	<Banner />
	{MARQUEE.show && <Morquee marquee={ MARQUEE } />}
	<section class="ptop-[2.7] pbottom-[2.5] bg-accent-500">
		<div class="container">
			<PageH1 h1=`Автосервис ${brand} в&nbsp;${legal_city_where}` classes="text-center fz-[3] text-white font-medium leading-none" />
		</div>
	</section>
	{TIMER.show && <Timer endtime={TIMER.endtime} title={TIMER.title} subtitle={TIMER.subtitle} btnName={TIMER.btnName} />}
	{specialServicesData && <SpecialServices items={specialServicesData} />}
	{faqBlocks.length > 0 && (
    <section class="faq container mt-10" id="services-faq" x-data="{activities:[]}">
      <h2 class="mb-8 sm:mb-14">Наши услуги</h2>
      {faqBlocks.map(({ item, rows }) => (
        <FaqItem item={item}>
					<div class="content">
						<Table data={rows} head={['Наименование', 'Цена, руб.']} popupText="Заявка на услугу<br />" tableLoyoutFixed={true} />
					</div>
        </FaqItem>
      ))}
    </section>
  )}
  <LatestPosts collectionName="actions" title="Специальные предложения" id="specials" class="bg-gray-100" />
	{servicesData && <NewServices items={servicesData} title="Услуги сервисного центра" id="new-services" show={false} />}
	{faqData && <Faq items={faqData} title="Часто задаваемые вопросы" class="bg-gray-100" />}
	<Callback bgUrl="https://cdn.alexsab.ru/b/alpha-center/img/konkurenty.webp" />
	{reviewsData && <ReviewsSlider items={reviewsData} title="Отзывы о нас" class="bg-gray-100" />}
	<Services />
	<SeoText mdx="index" />
	<Contacts />
</Layout>