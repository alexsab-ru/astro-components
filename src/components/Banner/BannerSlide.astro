---
import type { TBanner } from './types';
interface Props {
	banner: TBanner;
	index?: number;
}
const {banner, index} = Astro.props;
import Button from '../Button/Button.astro';
import Badge from './Badge.astro';
import BannerTitle from './Title.astro';
import BannerDescription from './Description.astro';
import BannerVideo from './Video.astro';
import BannerImage from './Image.astro';

// Определяем цвет кнопки с fallback на белый
const btnColor = banner?.btnColor ? banner?.btnColor : 'white';

// Определяем тип контента и наличие ссылки
// Делаем код проще и читаемее
const isVideo = banner?.type === 'video';
const hasBannerUrl = !!banner?.bannerUrl;

// Выбираем компонент медиа один раз
const BannerType = isVideo ? BannerVideo : BannerImage;

// Готовим атрибуты ссылки один раз (только если есть URL)
const linkAttrs = hasBannerUrl ? {
	href: banner.bannerUrl as string,
	class: `absolute inset-0 h-full w-full z-10 block ${banner?.view === 'popup-link' ? 'popup-link' : ''}`,
	...(banner?.dataTitle ? {'data-title': banner.dataTitle} : {}),
	...(banner?.dataFormName ? {'data-form_name': banner.dataFormName} : {}),
	...(banner?.target ? {target: banner.target} : {}),
} : null;
---

<div class={`swiper-slide banner-slide ${banner?.gradient === false ? '' : 'gradient'}`} data-swiper-autoplay={banner?.autoplay ? banner.autoplay : 5000}>
	<div class="container h-full relative z-[2] py-10 lg:py-20">
		<div class="h-full flex flex-col justify-between">
			<div class="mb-10">
				{ banner?.title && ( <BannerTitle title={banner.title} /> ) }
				{ banner?.descr && ( <BannerDescription description={banner.descr} /> ) }
				{
					banner?.btn && (
						<div data-swiper-parallax="-55%">
							<Button
								classes={`btn inline-block !py-2 sm:py-3 text-sm sm:text-base mt-8 sm:mt-10 ${btnColor}`}
								view={banner?.view}
								url={banner?.btnUrl}
								title={banner?.btn}
								dataTitle={banner?.dataTitle}
								dataFormName={banner?.dataFormName}
							/>
						</div>
					)
				}
			</div>
			{
				banner?.badge && (
					<Badge
						autoname={banner.badge?.autoname}
						title={banner.badge?.title}
						descr={banner.badge?.descr}
						image={banner.badge?.image}
						position={banner.badge?.position}
						colorText={banner.badge?.colorText}
						bg={banner.badge?.bg}
					/>
				)
			}
		</div>
	</div>
	
	{/* 
		Простой и читаемый рендер медиа:
		- `BannerType` выбирается один раз
		- Если есть `bannerUrl`, оборачиваем в ссылку, иначе выводим как есть
	*/}
	{
		hasBannerUrl ? (
			<a {...linkAttrs}>
				<BannerType banner={banner} {...(!isVideo ? { index } : {})} />
			</a>
		) : (
			<BannerType banner={banner} {...(!isVideo ? { index } : {})} />
		)
	}
</div>
