---
type TMarquee = {
	title: string;
	count?: number;
	speed?: number;
	show: boolean;
}
interface Props {
	marquee: TMarquee;
	classes?: string;
}
const {title, count = 8, show = false, speed = 20} = Astro.props.marquee;
const { classes = "absolute w-full left-0 z-10 top-[50vh] md:top-[70vh]" } = Astro.props;
const items = Array(count).fill(title) || [];
---
{show && (
	<div class={`flex items-center overflow-x-hidden bg-accent-500 ${classes}`} style={`--animation-speed: ${speed}s`}>
		<div class="marquee_run_string whitespace-nowrap py-2 sm:py-3 sm:text-xl md:text-3xl text-white">
			{items.length > 0 && items.map(item => (
				<span class="uppercase pr-8 sm:pr-[54px] mr-[28px] sm:mr-[44px]"><Fragment set:html={item} /></span>
			))}
		</div>
	</div>
)}

<style>
	.marquee_run_string {
		animation: runstring var(--animation-speed) infinite linear;
	}
	.marquee_run_string span {
		display: inline-block;
		position: relative;
		font-weight: 500;
	}
	.marquee_run_string span:after {
		content: '';
		display: block;
		width: 10px;
		height: 10px;
		background: #ffffff;
		border-radius: 50%;
		position: absolute;
		right: -5px;
		top: calc(50% - 5px);
	}
	@keyframes runstring {
		0% {
			transform: translateX(0);
		}
		100% {
			transform: translateX(-50%);
		}
	}
</style>