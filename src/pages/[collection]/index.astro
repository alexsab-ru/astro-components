---
import type { TDataCollection, TCollection } from '@/types/TCollection';
import { getCollection } from "astro:content";
import PageLayout from '@/layouts/PageLayout.astro';
import { SITE_NAME, COLLECTIONS } from '@/const';
import PostItem from '@/components/Post/Item.astro';
import { sortingAndFilteringPosts } from '@/js/utils/sortingAndFilteringPosts';
import { getRandomInt } from '@/js/utils/numbers.format';
import SeoText from '@/components/Seo/Index.astro';

export async function getStaticPaths() {
  return COLLECTIONS.map((collection) => ({ 
		params: { collection: collection.name },
		props: { title: collection.title }
	}));
}

const { collection } = Astro.params;
const { title } = Astro.props;
const entries = await getCollection(collection);
let posts: TCollection[], image = '';
if (entries && entries.length > 0) {
	posts = sortingAndFilteringPosts(entries);
	if(posts.length > 0){
		image = posts[getRandomInt(0, posts.length)].data.image;
	}
} else {
	// Если массив пустой, можно присвоить image значение по умолчанию или обработать этот случай
	image = ''; // или какая-то другая логика
	posts = [];
}
const breadcrumb = { name: title, href: `/${collection}/` };
---

<PageLayout
	h1={title}
	title={`${title} | ${SITE_NAME}`}
	breadcrumb={[breadcrumb]}
	image={image ? image : ''}
	backLink={true}
>
	<SeoText mdx={collection} noPadding />
	{
		posts.length > 0 ? (
			<div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-5">
				{ posts.map(post => ( <PostItem post={post} /> )) }
			</div>
		) : (
			<p>Скоро здесь появятся {title.toLowerCase()} {SITE_NAME}.</p>
		)
	}
</PageLayout>